name: Release Charts

on:
  push:
    branches:
      - main

jobs:
  sonar_lint:
    name: Sonar Scan
    runs-on: amd64
    permissions: read-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Sonar Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true

      - name: Sonar Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Lint Charts
        run: |
          helm lint charts/api-service
          helm lint charts/app-template
          helm lint charts/n8n
          helm repo add redis https://charts.bitnami.com/bitnami

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Auto-increment chart versions (in-memory only)
        run: |
          # Function to increment version in memory (no git commits)
          increment_version() {
            local chart_path=$1
            local current_version=$(grep '^version:' "$chart_path/Chart.yaml" | awk '{print $2}')
            echo "Current version for $chart_path: $current_version"
            
            # Check if tag exists  
            local chart_name=$(basename "$chart_path")
            local tag_name="${chart_name}-${current_version}"
            
            # Get all existing releases from GitHub API
            local existing_releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/c4ad/chart-application/releases" | \
              jq -r '.[].tag_name')
            
            if echo "$existing_releases" | grep -q "^${tag_name}$"; then
              echo "Release ${tag_name} already exists, incrementing patch version..."
              # Split version into major.minor.patch
              IFS='.' read -r major minor patch <<< "$current_version"
              new_patch=$((patch + 1))
              new_version="${major}.${minor}.${new_patch}"
              
              # Update Chart.yaml temporarily (no commit)
              sed -i "s/^version: .*/version: $new_version/" "$chart_path/Chart.yaml"
              echo "Updated $chart_path version to $new_version (temporarily)"
            else
              echo "Release ${tag_name} does not exist, keeping current version"
            fi
          }
          
          # Auto-increment versions for all charts
          for chart_dir in charts/*/; do
            if [[ -f "$chart_dir/Chart.yaml" ]]; then
              increment_version "$chart_dir"
            fi
          done

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: "true"
          
      - name: Update Helm repository index
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: charts
          owner: c4ad
          repository: chart-application
          branch: gh-pages
          commit_username: ${{ github.actor }}
          commit_email: ${{ github.actor }}@users.noreply.github.com