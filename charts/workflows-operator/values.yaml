# Default values for workflows-operator
# This is a YAML-formatted file
# Declare variables to be passed into your templates

namespace: workflows-operator

environment:
  name: dev
  domain: ".dev.fitwel.org"
  awsRegion: us-east-1
  awsAccountId: "123456789012"

registry:
  usEast1: "123456789012.dkr.ecr.us-east-1.amazonaws.com"
  caCentral1: "123456789012.dkr.ecr.ca-central-1.amazonaws.com"

# Applications configuration
# Each key represents an application to be deployed
applications: {}
  # Example structure - email-service:
  # email-service:
  #   annotations:
  #     avp.kubernetes.io/path: dev/secrets
  #   basepath: "/EmailService"
  #   replicas: 1
  #   hpaMinReplicas: 1
  #   hpaMaxReplicas: 3
  #   targetCPUUtilizationPercentage: 80
  #   serviceAccount: "email-service-sa"
  #   ingress:
  #     - enabled: true
  #       ingressClass: alb
  #       annotations:
  #         alb.ingress.kubernetes.io/group.name: "internal-apps"
  #         alb.ingress.kubernetes.io/scheme: internal
  #         alb.ingress.kubernetes.io/target-type: ip
  #         alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
  #         alb.ingress.kubernetes.io/healthcheck-path: "/health"
  #       tls:
  #         - hosts:
  #             - "email-service{{ .Values.environment.domain }}"
  #           secretName: "email-service-tls"
  #       rules:
  #         - host: "email-service{{ .Values.environment.domain }}"
  #           path: "/"
  #   containers:
  #     - name: email-service
  #       image: "{{ .Values.registry.usEast1 }}/email-service:latest"
  #       env:
  #         - name: ENVIRONMENT
  #           value: "{{ .Values.environment.name }}"
  #         - name: AWS_REGION
  #           value: "{{ .Values.environment.awsRegion }}"
  #         - name: AWS_ACCOUNT_ID
  #           value: "{{ .Values.environment.awsAccountId }}"
  #         - name: POSTGRES_HOST
  #           value: "<path:dev/secrets#postgres-host>"
  #         - name: POSTGRES_DB
  #           value: "<path:dev/secrets#postgres-db>"
  #         - name: POSTGRES_USER
  #           value: "<path:dev/secrets#postgres-user>"
  #         - name: POSTGRES_PASSWORD
  #           value: "<path:dev/secrets#postgres-password>"
  #         - name: POSTGRES_PORT
  #           value: "<path:dev/secrets#postgres-port>"
  #         - name: SECRET_KEY
  #           valueFrom:
  #             secretKeyRef:
  #               name: app-secrets
  #               key: secret-key
  #         - name: CONFIG_MAP_VALUE
  #           valueFrom:
  #             configMapKeyRef:
  #               name: app-config
  #               key: config-value
  #       resources:
  #         requests:
  #           cpu: "100m"
  #           memory: "256Mi"
  #         limits:
  #           cpu: "500m"
  #           memory: "1Gi"
  #       livenessProbe:
  #         httpGet:
  #           path: /health
  #           port: 5000
  #         initialDelaySeconds: 60
  #         periodSeconds: 30
  #         timeoutSeconds: 10
  #         failureThreshold: 3
  #       readinessProbe:
  #         httpGet:
  #           path: /health
  #           port: 5000
  #         initialDelaySeconds: 30
  #         periodSeconds: 10
  #         timeoutSeconds: 5
  #         failureThreshold: 3
  #   secrets:
  #     - name: "database-credentials"
  #       secretName: "db-secret"
  #       mountPath: "/etc/secrets/db"
  #       readOnly: true
  #     - name: "api-keys"
  #       secretName: "api-secret"
  #       mountPath: "/etc/secrets/api"
  #       subPath: "api.key"
  #       readOnly: true
  #     - name: "config-files"
  #       secretName: "app-config"
  #       mountPath: "/etc/config"
  #   service:
  #     - enabled: true
  #       name: "email-service"
  #       port: 80
  #       targetPort: 5000